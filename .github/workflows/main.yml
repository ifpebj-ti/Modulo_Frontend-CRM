name: Run Build, Tests and Code Inspects
on:
  push:
    branches:
      - main
jobs:
  discord:
    name: Run discord bot
    runs-on: ubuntu-latest
    steps:
      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

          
  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Run lint
        run: npm run lint

  
  build:
    name: Run project build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build


  horusec-security:
    name: horusec-security
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with: # Required when commit authors is enabled
        fetch-depth: 0
    - name: Running Horusec Security
      run: |
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
        horusec start -D -e="true" -p ./ --disable-docker="true"

        
  sonarqube:
    runs-on: ubuntu-latest
    needs: horusec-security
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        args: >
          -Dsonar.qualitygate.wait=true
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_PROJECT_TOKEN }}

  build_dockerfile:
    name: Build Docker image
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'arm64,arm'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/crm-cavalcante:frontend

  
  Execute_POST_request:
    name: Execute POST request
    needs: build_dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Execute POST request
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url:  ${{ secrets.WEBHOOK_URL }}
          data: '{"stackName": "crm-cavalcante", "stackStatus": "success"}'


  K6_Load_Test:
    name: k6 load test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run k6 local test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: k6.js
          flags: --out influxdb=${{ secrets.K6_URL}}
